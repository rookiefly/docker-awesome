version: "3.2"
services:
  zookeeper:
    image: zookeeper:3.4.10
    container_name: zoo
    ports:
      - "2181:2181"
    volumes:
      - zoo-data:/var/lib/zookeeper/data
      - zoo-log:/var/lib/zookeeper/log
    networks:
      - kafka

  kafka1:
    image: rookiefly/kafka:latest
    container_name: kafka1
    hostname: kafka1.test.local
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka1.test.local
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "example:1:1"
      KAFKA_LOG_DIRS: /kafka/logs
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=${JMX_HOST} -Dcom.sun.management.jmxremote.rmi.port=${JMX_PORT}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - kafka-data:/kafka
    networks:
      - kafka
    depends_on:
      - zookeeper

  # ksqldb-server:
  #   image: confluentinc/ksqldb-server:0.14.0
  #   hostname: ksqldb-server
  #   container_name: ksqldb-server
  #   depends_on:
  #     - kafka1
  #   ports:
  #     - "8088:8088"
  #   environment:
  #     KSQL_LISTENERS: http://0.0.0.0:8088
  #     KSQL_BOOTSTRAP_SERVERS: kafka1:9092
  #     KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
  #     KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"

  # ksqldb-cli:
  #   image: confluentinc/ksqldb-cli:0.14.0
  #   container_name: ksqldb-cli
  #   depends_on:
  #     - kafka1
  #     - ksqldb-server
  #   entrypoint: /bin/sh
  #   tty: true

  kafka-center:
    container_name: KafkaCenter
    image: xaecbd/kafka-center:2.3.0
    ports:
      - "8080:8080"
    volumes:
      - ./application.properties:/opt/app/kafka-center/config/application.properties
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - kafka
    depends_on:
      - mysql

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    container_name: elasticsearch
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=elasticsearch
      - "ES_JAVA_OPTS=-Xmx1g"
      - cluster.initial_master_nodes=es01
      - node.ml=false
      - xpack.ml.enabled=false
      - xpack.monitoring.enabled=false
      - xpack.security.enabled=false
      - xpack.watcher.enabled=false
      - xpack.graph.enabled=false
      - xpack.reporting.enabled=false
      - bootstrap.memory_lock=false
      - xpack.monitoring.collection.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata01:/usr/share/elasticsearch/data
      - eslogs01:/usr/share/elasticsearch/logs
    ports:
      - 9200:9200
    networks:
      - kafka

  mysql:
    image: rookiefly/mysql:latest
    container_name: mysql
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql-init-files:/docker-entrypoint-initdb.d
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: kafka_center
    ports:
      - "3306:3306"
    networks:
      - kafka

volumes:
  eslogs01:
    driver: local
  esdata01:
    driver: local
  mysql-data:
    driver: local
  zoo-data:
    driver: local
  zoo-log:
    driver: local
  kafka-data:
    driver: local
networks:
  kafka:
    driver: bridge
